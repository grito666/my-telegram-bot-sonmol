import os
import logging
import requests
from io import BytesIO
from PIL import Image, ImageDraw, ImageFont

from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import (
    ApplicationBuilder, CommandHandler, MessageHandler, CallbackQueryHandler,
    ConversationHandler, ContextTypes, filters
)

logging.basicConfig(level=logging.INFO)

TELEGRAM_TOKEN = os.getenv("TELEGRAM_TOKEN")
OPENWEATHER_API_KEY = os.getenv("OPENWEATHER_API_KEY")

# –°–æ—Å—Ç–æ—è–Ω–∏—è
MAIN_MENU, WEATHER_NOW, WEATHER_FORECAST = range(3)

# –ü–∞–º—è—Ç—å –¥–ª—è –∏—Å—Ç–æ—Ä–∏–∏ –∑–∞–ø—Ä–æ—Å–æ–≤ (user_id -> list –≥–æ—Ä–æ–¥–æ–≤)
history_data = {}

def create_weather_image(city, temp, description, humidity, icon_url):
    img = Image.new('RGB', (400, 200), color=(135, 206, 250))
    draw = ImageDraw.Draw(img)

    try:
        response = requests.get(icon_url)
        icon = Image.open(BytesIO(response.content)).convert("RGBA")
        icon = icon.resize((100, 100))
        img.paste(icon, (20, 50), icon)
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∏–∫–æ–Ω–∫–∏: {e}")

    font_path = "/usr/share/fonts/truetype/dejavu/DejaVuSans-Bold.ttf"
    try:
        font_large = ImageFont.truetype(font_path, 30)
        font_small = ImageFont.truetype(font_path, 20)
    except IOError:
        font_large = ImageFont.load_default()
        font_small = ImageFont.load_default()

    draw.text((140, 40), f"{city}", font=font_large, fill="white")
    draw.text((140, 80), f"{temp}¬∞C, {description}", font=font_small, fill="white")
    draw.text((140, 120), f"–í–ª–∞–∂–Ω–æ—Å—Ç—å: {humidity}%", font=font_small, fill="white")

    output = BytesIO()
    img.save(output, format='PNG')
    output.seek(0)
    return output

async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    keyboard = [
        [InlineKeyboardButton("üå§ –£–∑–Ω–∞—Ç—å –ø–æ–≥–æ–¥—É", callback_data='weather_now')],
        [InlineKeyboardButton("üìÖ –ü—Ä–æ–≥–Ω–æ–∑ –Ω–∞ –Ω–µ—Å–∫–æ–ª—å–∫–æ –¥–Ω–µ–π", callback_data='weather_forecast')],
        [InlineKeyboardButton("üïò –ò—Å—Ç–æ—Ä–∏—è –∑–∞–ø—Ä–æ—Å–æ–≤", callback_data='history')],
        [InlineKeyboardButton("‚ÑπÔ∏è –ü–æ–º–æ—â—å", callback_data='help')],
        [InlineKeyboardButton("‚ùå –û—Ç–º–µ–Ω–∞", callback_data='cancel')],
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)
    if update.message:
        await update.message.reply_text("–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:", reply_markup=reply_markup)
    elif update.callback_query:
        await update.callback_query.edit_message_text("–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:", reply_markup=reply_markup)
    return MAIN_MENU

async def menu_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()
    data = query.data
    user_id = query.from_user.id

    if data == 'weather_now':
        await query.edit_message_text("–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –≥–æ—Ä–æ–¥–∞ –¥–ª—è —Ç–µ–∫—É—â–µ–π –ø–æ–≥–æ–¥—ã:")
        return WEATHER_NOW
    elif data == 'weather_forecast':
        await query.edit_message_text("–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –≥–æ—Ä–æ–¥–∞ –¥–ª—è –ø—Ä–æ–≥–Ω–æ–∑–∞ –Ω–∞ –Ω–µ—Å–∫–æ–ª—å–∫–æ –¥–Ω–µ–π:")
        return WEATHER_FORECAST
    elif data == 'history':
        cities = history_data.get(user_id, [])
        if not cities:
            text = "–ò—Å—Ç–æ—Ä–∏—è –∑–∞–ø—Ä–æ—Å–æ–≤ –ø—É—Å—Ç–∞."
        else:
            text = "–ü–æ—Å–ª–µ–¥–Ω–∏–µ –≥–æ—Ä–æ–¥–∞:\n" + "\n".join(f"- {c}" for c in cities[-5:])
        await query.edit_message_text(text)
        return MAIN_MENU
    elif data == 'help':
        await query.edit_message_text(
            "–≠—Ç–æ—Ç –±–æ—Ç –ø–æ–º–æ–∂–µ—Ç:\n"
            "- –£–∑–Ω–∞—Ç—å —Ç–µ–∫—É—â—É—é –ø–æ–≥–æ–¥—É\n"
            "- –ü–æ–ª—É—á–∏—Ç—å –ø—Ä–æ–≥–Ω–æ–∑ –Ω–∞ –Ω–µ—Å–∫–æ–ª—å–∫–æ –¥–Ω–µ–π\n"
            "- –ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å –∏—Å—Ç–æ—Ä–∏—é –∑–∞–ø—Ä–æ—Å–æ–≤\n"
            "–ò—Å–ø–æ–ª—å–∑—É–π –∫–Ω–æ–ø–∫–∏ –º–µ–Ω—é –¥–ª—è –Ω–∞–≤–∏–≥–∞—Ü–∏–∏."
        )
        return MAIN_MENU
    elif data == 'cancel':
        await query.edit_message_text("–î–∏–∞–ª–æ–≥ –æ—Ç–º–µ–Ω—ë–Ω.")
        return ConversationHandler.END

def save_history(user_id, city):
    if user_id not in history_data:
        history_data[user_id] = []
    history_data[user_id].append(city)

async def get_current_weather(update: Update, context: ContextTypes.DEFAULT_TYPE):
    city = update.message.text.strip()
    user_id = update.message.from_user.id

    url = (

ùô∂ùöÅùô∏ùöÉùôæü´©, [06.06.2025 12:49]
f"http://api.openweathermap.org/data/2.5/weather?q={city}"
        f"&appid={OPENWEATHER_API_KEY}&units=metric&lang=ru"
    )
    try:
        response = requests.get(url)
        data = response.json()

        if data.get("cod") != 200:
            await update.message.reply_text("–ì–æ—Ä–æ–¥ –Ω–µ –Ω–∞–π–¥–µ–Ω. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.")
            return WEATHER_NOW

        temp = data["main"]["temp"]
        description = data["weather"][0]["description"].capitalize()
        humidity = data["main"]["humidity"]
        icon_code = data["weather"][0]["icon"]
        icon_url = f"http://openweathermap.org/img/wn/{icon_code}@2x.png"

        save_history(user_id, city)

        image = create_weather_image(city, temp, description, humidity, icon_url)
        await update.message.reply_photo(photo=image)
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –ø–æ–≥–æ–¥—ã: {e}")
        await update.message.reply_text("–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö.")
    return await start(update, context)

async def get_forecast(update: Update, context: ContextTypes.DEFAULT_TYPE):
    city = update.message.text.strip()
    user_id = update.message.from_user.id

    url = (
        f"http://api.openweathermap.org/data/2.5/forecast?q={city}"
        f"&appid={OPENWEATHER_API_KEY}&units=metric&lang=ru"
    )
    try:
        response = requests.get(url)
        data = response.json()

        if data.get("cod") != "200":
            await update.message.reply_text("–ì–æ—Ä–æ–¥ –Ω–µ –Ω–∞–π–¥–µ–Ω. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.")
            return WEATHER_FORECAST

        save_history(user_id, city)

        # –°–æ–±–∏—Ä–∞–µ–º –ø—Ä–æ–≥–Ω–æ–∑ –Ω–∞ 5 –¥–Ω–µ–π —Å –∏–Ω—Ç–µ—Ä–≤–∞–ª–æ–º 3 —á–∞—Å–∞, –≤–æ–∑—å–º–µ–º, –Ω–∞–ø—Ä–∏–º–µ—Ä, 12:00 –∫–∞–∂–¥–æ–≥–æ –¥–Ω—è
        forecast_text = f"–ü—Ä–æ–≥–Ω–æ–∑ –ø–æ–≥–æ–¥—ã –¥–ª—è {city}:\n"
        shown_dates = set()
        for item in data["list"]:
            dt_txt = item["dt_txt"]  # —Å—Ç—Ä–æ–∫–∞ —Ñ–æ—Ä–º–∞—Ç–∞ '2025-06-06 12:00:00'
            if "12:00:00" in dt_txt:
                date = dt_txt.split(" ")[0]
                if date in shown_dates:
                    continue
                shown_dates.add(date)
                temp = item["main"]["temp"]
                desc = item["weather"][0]["description"].capitalize()
                forecast_text += f"{date}: {temp}¬∞C, {desc}\n"
                if len(shown_dates) >= 5:
                    break

        await update.message.reply_text(forecast_text)
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –ø—Ä–æ–≥–Ω–æ–∑–∞: {e}")
        await update.message.reply_text("–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö.")
    return await start(update, context)

async def cancel(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text("–î–∏–∞–ª–æ–≥ –æ—Ç–º–µ–Ω—ë–Ω.")
    return ConversationHandler.END

if __name__ == "__main__":
    app = ApplicationBuilder().token(TELEGRAM_TOKEN).build()

    conv_handler = ConversationHandler(
        entry_points=[CommandHandler("start", start), CallbackQueryHandler(menu_handler)],
        states={
            MAIN_MENU: [CallbackQueryHandler(menu_handler)],
            WEATHER_NOW: [MessageHandler(filters.TEXT & ~filters.COMMAND, get_current_weather)],
            WEATHER_FORECAST: [MessageHandler(filters.TEXT & ~filters.COMMAND, get_forecast)],
        },
        fallbacks=[CommandHandler("cancel", cancel)],
        allow_reentry=True,
    )

    app.add_handler(conv_handler)

    print("–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω...")
    app.run_polling()
