import logging
from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import ApplicationBuilder, CommandHandler, CallbackQueryHandler, ContextTypes
import requests
import os

# –ò—Å–ø–æ–ª—å–∑—É–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è –¥–ª—è –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏
API_TOKEN = os.getenv('TELEGRAM_TOKEN')  # –ó–∞–º–µ–Ω–∏—Ç–µ –Ω–∞ –≤–∞—à —Ç–æ–∫–µ–Ω –≤ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞—Ö Render
NEWS_API_KEY = os.getenv('NEWS_API_KEY')  # –ê–Ω–∞–ª–æ–≥–∏—á–Ω–æ –¥–ª—è –∫–ª—é—á–∞ NewsAPI

logging.basicConfig(
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    level=logging.INFO
)

def main_menu():
    keyboard = [
        [InlineKeyboardButton("–ü–æ–≥–æ–¥–∞", callback_data='weather')],
        [InlineKeyboardButton("–ù–æ–≤–æ—Å—Ç–∏", callback_data='news')],
        [InlineKeyboardButton("–ì–æ—Ä–æ—Å–∫–æ–ø", callback_data='horoscope')],
    ]
    return InlineKeyboardMarkup(keyboard)

async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text(
        "–ü—Ä–∏–≤–µ—Ç! –í—ã–±–µ—Ä–∏ —Ä–∞–∑–¥–µ–ª:", 
        reply_markup=main_menu()
    )

async def button_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()
    data = query.data

    if data == 'news':
        url = f"https://newsapi.org/v2/top-headlines?category=technology&language=ru&apiKey={NEWS_API_KEY}"
        try:
            res = requests.get(url).json()
            articles = res.get('articles', [])[:5]
            if articles:
                msg = "–¢–æ–ø –Ω–æ–≤–æ—Å—Ç–∏ –ø–æ —Ç–µ—Ö–Ω–æ–ª–æ–≥–∏–∏:\n\n"
                for a in articles:
                    msg += f"‚Ä¢ [{a['title']}]({a['url']})\n"
                await query.edit_message_text(msg, parse_mode='Markdown')
            else:
                await query.edit_message_text("–ù–æ–≤–æ—Å—Ç–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã.")
        except Exception as e:
            logging.error(f"News API error: {e}")
            await query.edit_message_text("–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –Ω–æ–≤–æ—Å—Ç–µ–π.")

    elif data == 'horoscope':
        zodiac_menu = [
            [InlineKeyboardButton("–û–≤–µ–Ω", callback_data='hor_aries')],
            [InlineKeyboardButton("–ù–∞–∑–∞–¥", callback_data='main_menu')]
        ]
        await query.edit_message_text(
            "–í—ã–±–µ—Ä–∏ –∑–Ω–∞–∫ –∑–æ–¥–∏–∞–∫–∞:", 
            reply_markup=InlineKeyboardMarkup(zodiac_menu)
        )

    elif data.startswith('hor_'):
        sign = data[4:]
        try:
            response = requests.post(f'https://aztro.sameerkumar.website/?sign={sign}&day=today')
            if response.status_code == 200:
                horoscope = response.json()
                text = f"–ì–æ—Ä–æ—Å–∫–æ–ø –¥–ª—è {sign.capitalize()}:\n{horoscope['description']}"
                await query.edit_message_text(text)
            else:
                await query.edit_message_text("–û—à–∏–±–∫–∞ API –≥–æ—Ä–æ—Å–∫–æ–ø–∞.")
        except Exception as e:
            logging.error(f"Horoscope error: {e}")
            await query.edit_message_text("–°–µ—Ä–≤–∏—Å –≥–æ—Ä–æ—Å–∫–æ–ø–æ–≤ –≤—Ä–µ–º–µ–Ω–Ω–æ –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω.")

    elif data == 'main_menu':
        await query.edit_message_text("–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é:", reply_markup=main_menu())

    else:
        await query.edit_message_text("–†–∞–∑–¥–µ–ª –≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ üõ†")

if __name__ == '__main__':
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ç–æ–∫–µ–Ω–∞
    if not API_TOKEN:
        raise ValueError("TELEGRAM_TOKEN –Ω–µ –∑–∞–¥–∞–Ω –≤ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è!")
    
    app = ApplicationBuilder().token(API_TOKEN).build()
    app.add_handler(CommandHandler('start', start))
    app.add_handler(CallbackQueryHandler(button_handler))
    
    # –£–±–∏—Ä–∞–µ–º –¥—É–±–ª–∏—Ä–æ–≤–∞–Ω–∏–µ —ç–∫–∑–µ–º–ø–ª—è—Ä–æ–≤ –±–æ—Ç–∞
    app.run_polling(drop_pending_updates=True)
